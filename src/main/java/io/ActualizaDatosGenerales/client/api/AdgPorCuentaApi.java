/*
 * Actualiza Datos Generales API
 * <p>API de Actualiza Datos Generales.</p><br/><br><img src='https://developer.circulodecredito.com.mx/sites/default/files/2020-10/circulo_de_credito-apihub.png' height='40' width='220'/></p><br/>
 *
 * OpenAPI spec version: 1.2.3
 * Contact: api@circulodecredito.com.mx
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.ActualizaDatosGenerales.client.api;

import io.ActualizaDatosGenerales.client.ApiCallback;
import io.ActualizaDatosGenerales.client.ApiClient;
import io.ActualizaDatosGenerales.client.ApiException;
import io.ActualizaDatosGenerales.client.ApiResponse;
import io.ActualizaDatosGenerales.client.Configuration;
import io.ActualizaDatosGenerales.client.Pair;
import io.ActualizaDatosGenerales.client.ProgressRequestBody;
import io.ActualizaDatosGenerales.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.ActualizaDatosGenerales.client.model.Errores;
import io.ActualizaDatosGenerales.client.model.RequestADG;
import io.ActualizaDatosGenerales.client.model.RespuestaADG;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdgPorCuentaApi {
    private ApiClient apiClient;

    public AdgPorCuentaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdgPorCuentaApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for porCuentaPost
     * @param xSignature Firma generada con la llave privada (required)
     * @param xApiKey ConsumerKey obtenido desde el portal de desarrolladores (required)
     * @param username Usuario de Círculo de Crédito (required)
     * @param password Contraseña de Círculo de Crédito (required)
     * @param request &lt;p&gt;Estado en que se ubica el domicilio&lt;/p&gt; &lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Clave&lt;/th&gt;&lt;th&gt;Estado&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;AGS&lt;/td&gt;&lt;td&gt;AGUASCALIENTES&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BC&lt;/td&gt;&lt;td&gt;BAJA CALIFORNIA NORTE&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BCS&lt;/td&gt;&lt;td&gt;BAJA CALIFORNIA SUR&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CAMP&lt;/td&gt;&lt;td&gt;CAMPECHE&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CDMX&lt;/td&gt;&lt;td&gt;CIUDAD DE MÉXICO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CHIS&lt;/td&gt;&lt;td&gt;CHIAPAS&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CHIH&lt;/td&gt;&lt;td&gt;CHIHUAHUA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;COAH&lt;/td&gt;&lt;td&gt;COHAHUILA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;COL&lt;/td&gt;&lt;td&gt;COLIMA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DF&lt;/td&gt;&lt;td&gt;DISTRITO FEDERAL&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DGO&lt;/td&gt;&lt;td&gt;DURANGO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;GTO&lt;/td&gt;&lt;td&gt;GUANAJUATO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;GRO&lt;/td&gt;&lt;td&gt;GUERRERO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;HGO&lt;/td&gt;&lt;td&gt;HIDALGO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;JAL&lt;/td&gt;&lt;td&gt;JALISCO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MEX&lt;/td&gt;&lt;td&gt;MÉXICO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MICH&lt;/td&gt;&lt;td&gt;MICHOCÁN&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MOR&lt;/td&gt;&lt;td&gt;MORELOS&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;NAY&lt;/td&gt;&lt;td&gt;NAYARIT&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;NL&lt;/td&gt;&lt;td&gt;NUEVO LEÓN&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;OAX&lt;/td&gt;&lt;td&gt;OAXACA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;PUE&lt;/td&gt;&lt;td&gt;PUEBLA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;QRO&lt;/td&gt;&lt;td&gt;QUERÉTARO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;QROO&lt;/td&gt;&lt;td&gt;QUINTANA ROO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SLP&lt;/td&gt;&lt;td&gt;SAN LUIS POTOSÍ&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SIN&lt;/td&gt;&lt;td&gt;SINALOA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SON&lt;/td&gt;&lt;td&gt;SONORA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TAB&lt;/td&gt;&lt;td&gt;TABASCO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TAMP&lt;/td&gt;&lt;td&gt;TAMAULIPAS&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TLAX&lt;/td&gt;&lt;td&gt;TLAXCALA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;VER&lt;/td&gt;&lt;td&gt;VERACRUZ&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;YUC&lt;/td&gt;&lt;td&gt;YUCATÁN&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ZAC&lt;/td&gt;&lt;td&gt;ZACATECAS&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call porCuentaPostCall( String xApiKey, String username, String password, RequestADG request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/por-cuenta";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        
        if (xApiKey != null)
        localVarHeaderParams.put("x-api-key", apiClient.parameterToString(xApiKey));
        if (username != null)
        localVarHeaderParams.put("username", apiClient.parameterToString(username));
        if (password != null)
        localVarHeaderParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call porCuentaPostValidateBeforeCall( String xApiKey, String username, String password, RequestADG request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
      
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling porCuentaPost(Async)");
        }
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling porCuentaPost(Async)");
        }
        
        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling porCuentaPost(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling porCuentaPost(Async)");
        }
        

        okhttp3.Call call = porCuentaPostCall( xApiKey, username, password, request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Actualiza Datos Generales por cuenta
     * 
     * @param xApiKey ConsumerKey obtenido desde el portal de desarrolladores (required)
     * @param username Usuario de Círculo de Crédito (required)
     * @param password Contraseña de Círculo de Crédito (required)
     * @param request &lt;p&gt;Estado en que se ubica el domicilio&lt;/p&gt; &lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Clave&lt;/th&gt;&lt;th&gt;Estado&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;AGS&lt;/td&gt;&lt;td&gt;AGUASCALIENTES&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BC&lt;/td&gt;&lt;td&gt;BAJA CALIFORNIA NORTE&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BCS&lt;/td&gt;&lt;td&gt;BAJA CALIFORNIA SUR&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CAMP&lt;/td&gt;&lt;td&gt;CAMPECHE&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CDMX&lt;/td&gt;&lt;td&gt;CIUDAD DE MÉXICO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CHIS&lt;/td&gt;&lt;td&gt;CHIAPAS&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CHIH&lt;/td&gt;&lt;td&gt;CHIHUAHUA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;COAH&lt;/td&gt;&lt;td&gt;COHAHUILA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;COL&lt;/td&gt;&lt;td&gt;COLIMA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DF&lt;/td&gt;&lt;td&gt;DISTRITO FEDERAL&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DGO&lt;/td&gt;&lt;td&gt;DURANGO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;GTO&lt;/td&gt;&lt;td&gt;GUANAJUATO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;GRO&lt;/td&gt;&lt;td&gt;GUERRERO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;HGO&lt;/td&gt;&lt;td&gt;HIDALGO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;JAL&lt;/td&gt;&lt;td&gt;JALISCO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MEX&lt;/td&gt;&lt;td&gt;MÉXICO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MICH&lt;/td&gt;&lt;td&gt;MICHOCÁN&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MOR&lt;/td&gt;&lt;td&gt;MORELOS&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;NAY&lt;/td&gt;&lt;td&gt;NAYARIT&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;NL&lt;/td&gt;&lt;td&gt;NUEVO LEÓN&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;OAX&lt;/td&gt;&lt;td&gt;OAXACA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;PUE&lt;/td&gt;&lt;td&gt;PUEBLA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;QRO&lt;/td&gt;&lt;td&gt;QUERÉTARO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;QROO&lt;/td&gt;&lt;td&gt;QUINTANA ROO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SLP&lt;/td&gt;&lt;td&gt;SAN LUIS POTOSÍ&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SIN&lt;/td&gt;&lt;td&gt;SINALOA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SON&lt;/td&gt;&lt;td&gt;SONORA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TAB&lt;/td&gt;&lt;td&gt;TABASCO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TAMP&lt;/td&gt;&lt;td&gt;TAMAULIPAS&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TLAX&lt;/td&gt;&lt;td&gt;TLAXCALA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;VER&lt;/td&gt;&lt;td&gt;VERACRUZ&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;YUC&lt;/td&gt;&lt;td&gt;YUCATÁN&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ZAC&lt;/td&gt;&lt;td&gt;ZACATECAS&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; (required)
     * @return RespuestaADG
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RespuestaADG porCuentaPost( String xApiKey, String username, String password, RequestADG request) throws ApiException {
        ApiResponse<RespuestaADG> resp = porCuentaPostWithHttpInfo( xApiKey, username, password, request);
        return resp.getData();
    }

    /**
     * Actualiza Datos Generales por cuenta
     * 
     * @param xApiKey ConsumerKey obtenido desde el portal de desarrolladores (required)
     * @param username Usuario de Círculo de Crédito (required)
     * @param password Contraseña de Círculo de Crédito (required)
     * @param request &lt;p&gt;Estado en que se ubica el domicilio&lt;/p&gt; &lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Clave&lt;/th&gt;&lt;th&gt;Estado&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;AGS&lt;/td&gt;&lt;td&gt;AGUASCALIENTES&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BC&lt;/td&gt;&lt;td&gt;BAJA CALIFORNIA NORTE&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BCS&lt;/td&gt;&lt;td&gt;BAJA CALIFORNIA SUR&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CAMP&lt;/td&gt;&lt;td&gt;CAMPECHE&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CDMX&lt;/td&gt;&lt;td&gt;CIUDAD DE MÉXICO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CHIS&lt;/td&gt;&lt;td&gt;CHIAPAS&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CHIH&lt;/td&gt;&lt;td&gt;CHIHUAHUA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;COAH&lt;/td&gt;&lt;td&gt;COHAHUILA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;COL&lt;/td&gt;&lt;td&gt;COLIMA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DF&lt;/td&gt;&lt;td&gt;DISTRITO FEDERAL&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DGO&lt;/td&gt;&lt;td&gt;DURANGO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;GTO&lt;/td&gt;&lt;td&gt;GUANAJUATO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;GRO&lt;/td&gt;&lt;td&gt;GUERRERO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;HGO&lt;/td&gt;&lt;td&gt;HIDALGO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;JAL&lt;/td&gt;&lt;td&gt;JALISCO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MEX&lt;/td&gt;&lt;td&gt;MÉXICO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MICH&lt;/td&gt;&lt;td&gt;MICHOCÁN&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MOR&lt;/td&gt;&lt;td&gt;MORELOS&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;NAY&lt;/td&gt;&lt;td&gt;NAYARIT&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;NL&lt;/td&gt;&lt;td&gt;NUEVO LEÓN&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;OAX&lt;/td&gt;&lt;td&gt;OAXACA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;PUE&lt;/td&gt;&lt;td&gt;PUEBLA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;QRO&lt;/td&gt;&lt;td&gt;QUERÉTARO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;QROO&lt;/td&gt;&lt;td&gt;QUINTANA ROO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SLP&lt;/td&gt;&lt;td&gt;SAN LUIS POTOSÍ&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SIN&lt;/td&gt;&lt;td&gt;SINALOA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SON&lt;/td&gt;&lt;td&gt;SONORA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TAB&lt;/td&gt;&lt;td&gt;TABASCO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TAMP&lt;/td&gt;&lt;td&gt;TAMAULIPAS&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TLAX&lt;/td&gt;&lt;td&gt;TLAXCALA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;VER&lt;/td&gt;&lt;td&gt;VERACRUZ&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;YUC&lt;/td&gt;&lt;td&gt;YUCATÁN&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ZAC&lt;/td&gt;&lt;td&gt;ZACATECAS&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; (required)
     * @return ApiResponse&lt;RespuestaADG&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RespuestaADG> porCuentaPostWithHttpInfo( String xApiKey, String username, String password, RequestADG request) throws ApiException {
        okhttp3.Call call = porCuentaPostValidateBeforeCall( xApiKey, username, password, request, null, null);
        Type localVarReturnType = new TypeToken<RespuestaADG>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Actualiza Datos Generales por cuenta (asynchronously)
     * 
     * @param xSignature Firma generada con la llave privada (required)
     * @param xApiKey ConsumerKey obtenido desde el portal de desarrolladores (required)
     * @param username Usuario de Círculo de Crédito (required)
     * @param password Contraseña de Círculo de Crédito (required)
     * @param request &lt;p&gt;Estado en que se ubica el domicilio&lt;/p&gt; &lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Clave&lt;/th&gt;&lt;th&gt;Estado&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;AGS&lt;/td&gt;&lt;td&gt;AGUASCALIENTES&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BC&lt;/td&gt;&lt;td&gt;BAJA CALIFORNIA NORTE&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BCS&lt;/td&gt;&lt;td&gt;BAJA CALIFORNIA SUR&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CAMP&lt;/td&gt;&lt;td&gt;CAMPECHE&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CDMX&lt;/td&gt;&lt;td&gt;CIUDAD DE MÉXICO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CHIS&lt;/td&gt;&lt;td&gt;CHIAPAS&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CHIH&lt;/td&gt;&lt;td&gt;CHIHUAHUA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;COAH&lt;/td&gt;&lt;td&gt;COHAHUILA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;COL&lt;/td&gt;&lt;td&gt;COLIMA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DF&lt;/td&gt;&lt;td&gt;DISTRITO FEDERAL&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DGO&lt;/td&gt;&lt;td&gt;DURANGO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;GTO&lt;/td&gt;&lt;td&gt;GUANAJUATO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;GRO&lt;/td&gt;&lt;td&gt;GUERRERO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;HGO&lt;/td&gt;&lt;td&gt;HIDALGO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;JAL&lt;/td&gt;&lt;td&gt;JALISCO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MEX&lt;/td&gt;&lt;td&gt;MÉXICO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MICH&lt;/td&gt;&lt;td&gt;MICHOCÁN&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MOR&lt;/td&gt;&lt;td&gt;MORELOS&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;NAY&lt;/td&gt;&lt;td&gt;NAYARIT&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;NL&lt;/td&gt;&lt;td&gt;NUEVO LEÓN&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;OAX&lt;/td&gt;&lt;td&gt;OAXACA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;PUE&lt;/td&gt;&lt;td&gt;PUEBLA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;QRO&lt;/td&gt;&lt;td&gt;QUERÉTARO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;QROO&lt;/td&gt;&lt;td&gt;QUINTANA ROO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SLP&lt;/td&gt;&lt;td&gt;SAN LUIS POTOSÍ&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SIN&lt;/td&gt;&lt;td&gt;SINALOA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SON&lt;/td&gt;&lt;td&gt;SONORA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TAB&lt;/td&gt;&lt;td&gt;TABASCO&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TAMP&lt;/td&gt;&lt;td&gt;TAMAULIPAS&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TLAX&lt;/td&gt;&lt;td&gt;TLAXCALA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;VER&lt;/td&gt;&lt;td&gt;VERACRUZ&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;YUC&lt;/td&gt;&lt;td&gt;YUCATÁN&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ZAC&lt;/td&gt;&lt;td&gt;ZACATECAS&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call porCuentaPostAsync( String xApiKey, String username, String password, RequestADG request, final ApiCallback<RespuestaADG> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = porCuentaPostValidateBeforeCall( xApiKey, username, password, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RespuestaADG>(){}.getType();
        apiClient.execute(call, localVarReturnType);
        return call;
    }
}
